Index: app/src/main/java/com/example/stockifi/ProfilActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.stockifi;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.Menu;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.Spinner;\r\nimport android.widget.Switch;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.stockifi.GlobalVariables.MyApp;\r\nimport com.example.stockifi.Liste_Course.ListeDeCourse;\r\nimport com.google.android.material.appbar.MaterialToolbar;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class ProfilActivity extends AppCompatActivity {\r\n\r\n    private static final int MENU_POUBELLE = R.id.poubelle;\r\n    private static final int MENU_MESSAGE = R.id.message;\r\n    private static final int MENU_PROFIL = R.id.profil1;\r\n\r\n    private static final String SWITCH3_STATE_KEY = \"switch3StateKey\";\r\n\r\n\r\n    private LinearLayout pickDateButton;\r\n    private TextView date_naissace;\r\n\r\n    private int year, month, day;\r\n    private boolean titreSelectionne = false;\r\n\r\n    private static final String PREFS_NAME = \"MyPrefsFile\";\r\n    private static final String TAILLE_KEY = \"tailleKey\";\r\n\r\n    //private static final String PREFS_NAME = \"MyPrefsFile\";\r\n    private static final String SPINNER_SELECTION_KEY = \"spinnerSelectionKey\";\r\n\r\n    private static final String SPINNER_GENDER_SELECTION_KEY = \"spinnerGenderSelectionKey\";\r\n\r\n    private static final String SELECTED_DATE_KEY = \"selectedDateKey\";\r\n\r\n    private static final String WEIGHT_KEY = \"weightKey\";\r\n    private static final String SPINNER_POIDS_SELECTION_KEY = \"spinnerPoidsSelectionKey\";\r\n\r\n    private static final String SPINNER_REGIME_SELECTION_KEY = \"spinnerRegimeSelectionKey\";\r\n\r\n    private static final String SELECTED_RADIO_BUTTON_KEY = \"selectedRadioButtonKey\";\r\n\r\n    private static final String SPINNER_DEVISE_SELECTION_KEY = \"spinnerDeviseSelectionKey\";\r\n\r\n    private static final String SWITCH_STATE_KEY = \"switchStateKey\";\r\n    private static final String SWITCH2_STATE_KEY = \"switch2StateKey\";\r\n    private static final String SWITCH4_STATE_KEY = \"switch4StateKey\";\r\n    private static final String QUANTITE_CRI_KEY = \"quantiteCriKey\";\r\n\r\n    private static final String SPINNER_MESURE_SELECTION_KEY = \"spinnerMesureSelectionKey\";\r\n\r\n    private static final String SPINNER_DATE_PER_SELECTION_KEY = \"spinnerDatePerSelectionKey\";\r\n\r\n\r\n    private TextView nomProfilView;\r\n    private TextView emailProfilView;\r\n\r\n    private EditText editTextQuantiteCri;\r\n\r\n    private EditText editTextPoids;\r\n    private EditText editTextDelaiRappel;\r\n\r\n\r\n    private EditText editTextTaille;\r\n\r\n\r\n    Spinner spinnerGender;\r\n    Spinner spinnerTaille;\r\n    Spinner spinnerPoids;\r\n    Spinner spinnerRegime;\r\n    Spinner spinnerDevise;\r\n    Spinner spinnerDate;\r\n    Spinner spinnerQuantite;\r\n    Spinner spinnerPerem;\r\n\r\n    private RadioButton radioButtonMetric;\r\n    private RadioButton radioButtonImperial;\r\n\r\n\r\n    private static final String DELAI_RAPPEL_KEY = \"delaiRappelKey\";\r\n    private static final String SPINNER_DATE_SELECTION_KEY = \"spinnerDateSelectionKey\";\r\n    private static final String PEREMPT_KEY = \"peremptKey\";\r\n\r\n    private EditText editTextPerempt;\r\n\r\n    private Button buttonSupCompte ;\r\n    private Button LogoutButton;\r\n\r\n    private BackendManager backendManager;\r\n\r\n    private  int currentUserId;\r\n\r\n\r\n\r\n    public void onBouttonCondiClick(View view) {\r\n        // Code à exécuter lorsque le LinearLayout est cliqué\r\n        Intent intent = new Intent(this, ConditionUtilisationActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_profil);\r\n\r\n        // Gestionnaire de clic pour l'élément \"Courses\"\r\n        BottomNavigationView bottomNavigationView = findViewById(R.id.androidx_window);\r\n        Menu menu = bottomNavigationView.getMenu();\r\n\r\n\r\n        // Gestionnaire de clic pour l'élément \"Courses\"\r\n        menu.findItem(R.id.courses).setOnMenuItemClickListener(item -> {\r\n            Intent intent = new Intent(ProfilActivity.this, ListeDeCourse.class);\r\n            startActivity(intent);\r\n\r\n            return true;\r\n        });\r\n\r\n        buttonSupCompte = findViewById(R.id.button_supCompte);\r\n        buttonSupCompte.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                afficherConfirmationSuppression();\r\n            }\r\n        });\r\n\r\n\r\n        Button envoyerEmailButton=findViewById(R.id.button_email);\r\n        envoyerEmailButton.setOnClickListener(new View.OnClickListener() {\r\n                                                  private void envoyerEmailReclamation() {\r\n                                                      // Adresse e-mail du destinataire (modifiable selon vos besoins)\r\n                                                      String destinataire = \"mehdi@gmail.com\";\r\n\r\n                                                      // Sujet du courriel (modifiable selon vos besoins)\r\n                                                      String sujet = \"Réclamation\";\r\n\r\n                                                      // Message du courriel (modifiable selon vos besoins)\r\n                                                      String message = \"Bonjour, je souhaite déposer une réclamation.\";\r\n\r\n                                                      // Créer une intention pour envoyer un e-mail via Gmail\r\n                                                      Intent intent = new Intent(Intent.ACTION_SENDTO);\r\n                                                      intent.setData(Uri.parse(\"mailto:\" + destinataire));\r\n                                                      intent.putExtra(Intent.EXTRA_SUBJECT, sujet);\r\n                                                      intent.putExtra(Intent.EXTRA_TEXT, message);\r\n\r\n                                                      // Vérifier si l'appareil dispose d'une application de messagerie capable de gérer cette intention\r\n                                                      if (intent.resolveActivity(getPackageManager()) != null) {\r\n                                                          startActivity(intent);\r\n                                                      }\r\n                                                  }\r\n            @Override\r\n            public void onClick(View view) {\r\n                envoyerEmailReclamation();\r\n            }\r\n                                              });\r\n\r\n        editTextPerempt = findViewById(R.id.perempt);\r\n\r\n        // Restaurer la valeur de l'EditText \"perempt\" lors du démarrage de l'application\r\n        SharedPreferences sharedPreferences_peremp = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        String savedPerempt = sharedPreferences_peremp.getString(PEREMPT_KEY, \"3\"); // \"3\" est la valeur par défaut\r\n        editTextPerempt.setText(savedPerempt);\r\n\r\n        // Ajouter un TextWatcher pour détecter les changements dans l'EditText \"perempt\"\r\n        editTextPerempt.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Avant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Pendant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n                // Après que le texte a changé\r\n\r\n                // Sauvegarder la nouvelle valeur automatiquement\r\n                String enteredPerempt = editable.toString();\r\n                SharedPreferences.Editor editor = sharedPreferences_peremp.edit();\r\n                editor.putString(PEREMPT_KEY, enteredPerempt);\r\n                editor.apply();\r\n            }\r\n        });\r\n\r\n\r\n        editTextDelaiRappel = findViewById(R.id.delai_rappel);\r\n\r\n        // Restaurer la valeur de l'EditText \"delai_rappel\" lors du démarrage de l'application\r\n        SharedPreferences sharedPreferences_rappel = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        String savedDelaiRappel = sharedPreferences_rappel.getString(DELAI_RAPPEL_KEY, \"3\"); // \"3\" est la valeur par défaut\r\n        editTextDelaiRappel.setText(savedDelaiRappel);\r\n\r\n        // Ajouter un TextWatcher pour détecter les changements dans l'EditText \"delai_rappel\"\r\n        editTextDelaiRappel.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Avant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Pendant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n                // Après que le texte a changé\r\n\r\n                // Sauvegarder la nouvelle valeur automatiquement\r\n                String enteredDelaiRappel = editable.toString();\r\n                SharedPreferences.Editor editor = sharedPreferences_rappel.edit();\r\n                editor.putString(DELAI_RAPPEL_KEY, enteredDelaiRappel);\r\n                editor.apply();\r\n            }\r\n        });\r\n\r\n        editTextQuantiteCri = findViewById(R.id.quantite_cri);\r\n\r\n        // Restaurer la valeur de l'EditText \"quantite_cri\" lors du démarrage de l'application\r\n        SharedPreferences sharedPreferences_quantite = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        String savedQuantiteCri = sharedPreferences_quantite.getString(QUANTITE_CRI_KEY, \"20\"); // \"20\" est la valeur par défaut\r\n        editTextQuantiteCri.setText(savedQuantiteCri);\r\n\r\n        // Ajouter un TextWatcher pour détecter les changements dans l'EditText \"quantite_cri\"\r\n        editTextQuantiteCri.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Avant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Pendant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n                // Après que le texte a changé\r\n\r\n                // Sauvegarder la nouvelle valeur automatiquement\r\n                String enteredQuantiteCri = editable.toString();\r\n                SharedPreferences.Editor editor = sharedPreferences_quantite.edit();\r\n                editor.putString(QUANTITE_CRI_KEY, enteredQuantiteCri);\r\n                editor.apply();\r\n            }\r\n        });\r\n\r\n        editTextTaille = findViewById(R.id.editTexte_taille);\r\n\r\n        // Restaurer la valeur sauvegardée lors du démarrage de l'application\r\n        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        String savedTaille = prefs.getString(TAILLE_KEY, \"\");\r\n        editTextTaille.setText(savedTaille);\r\n\r\n        // Ajouter un TextWatcher pour détecter les changements dans l'EditText\r\n        editTextTaille.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Avant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Pendant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n                // Après que le texte a changé\r\n\r\n                // Sauvegarder la nouvelle valeur automatiquement\r\n                String enteredValue = editable.toString();\r\n                SharedPreferences.Editor editor = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit();\r\n                editor.putString(TAILLE_KEY, enteredValue);\r\n                editor.apply();\r\n            }\r\n        });\r\n\r\n       // AppBarLayout appBarLayout = findViewById(R.id.appBar);\r\n        MaterialToolbar toolbar = findViewById(R.id.toolbar); // Assurez-vous que le R.id.toolbar correspond à votre MaterialToolbar\r\n\r\n        // Ajoutez ceci pour afficher le bouton de retour (optionnel)\r\n\r\n\r\n        // Gestionnaire d'événements du menu\r\n\r\n\r\n\r\n        final EditText editText = findViewById(R.id.editTexte_taille);\r\n\r\n        editText.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                editText.setFocusableInTouchMode(true);\r\n                editText.requestFocus();\r\n            }\r\n        });\r\n\r\n        Switch yourSwitch = findViewById(R.id.switch1);\r\n        Switch yourSwitch2 = findViewById(R.id.switch2);\r\n        Switch yourSwitch3 = findViewById(R.id.switch3);\r\n        Switch yourSwitch4 = findViewById(R.id.switch4);\r\n\r\n\r\n        yourSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_switch1 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        boolean savedSwitchState = sharedPreferences_switch1.getBoolean(SWITCH_STATE_KEY, false); // false est la valeur par défaut\r\n        yourSwitch.setChecked(savedSwitchState);\r\n\r\n        // Ajouter un écouteur pour le changement d'état du Switch\r\n        yourSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Sauvegarder le nouvel état automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_switch1.edit();\r\n                editor.putBoolean(SWITCH_STATE_KEY, isChecked);\r\n                editor.apply();\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        yourSwitch2.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch2.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_switch2 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        boolean savedSwitch2State = sharedPreferences_switch2.getBoolean(SWITCH2_STATE_KEY, false); // false est la valeur par défaut\r\n        yourSwitch2.setChecked(savedSwitch2State);\r\n\r\n        // Ajouter un écouteur pour le changement d'état du Switch\r\n        yourSwitch2.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Sauvegarder le nouvel état automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_switch2.edit();\r\n                editor.putBoolean(SWITCH2_STATE_KEY, isChecked);\r\n                editor.apply();\r\n\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch2.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        yourSwitch3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch3.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_switch3 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        boolean savedSwitch3State = sharedPreferences_switch3.getBoolean(SWITCH3_STATE_KEY, false); // false est la valeur par défaut\r\n        yourSwitch3.setChecked(savedSwitch3State);\r\n\r\n        // Ajouter un écouteur pour le changement d'état du Switch\r\n        yourSwitch3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Sauvegarder le nouvel état automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_switch3.edit();\r\n                editor.putBoolean(SWITCH3_STATE_KEY, isChecked);\r\n                editor.apply();\r\n\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch3.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        yourSwitch4.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch4.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_switch4 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        boolean savedSwitch4State = sharedPreferences_switch4.getBoolean(SWITCH4_STATE_KEY, false); // false est la valeur par défaut\r\n        yourSwitch4.setChecked(savedSwitch4State);\r\n\r\n        // Ajouter un écouteur pour le changement d'état du Switch\r\n        yourSwitch4.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n                // Sauvegarder le nouvel état automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_switch4.edit();\r\n                editor.putBoolean(SWITCH4_STATE_KEY, isChecked);\r\n                editor.apply();\r\n\r\n                // Mettez à jour la couleur du pouce en fonction de l'état du switch\r\n                int thumbColor = isChecked\r\n                        ? getResources().getColor(R.color.switch_thumb_checked_color)\r\n                        : getResources().getColor(R.color.white);\r\n\r\n                yourSwitch4.getThumbDrawable().setTint(thumbColor);\r\n            }\r\n        });\r\n\r\n\r\n        TextView changePass=findViewById(R.id.change_pass);\r\n        changePass.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // Définissez l'Intent pour passer à l'écran de destination\r\n                Intent intent = new Intent(ProfilActivity.this, ChangerPassword.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        RadioGroup radioGroup = findViewById(R.id.radioGroup);\r\n\r\n        radioGroup.setOnCheckedChangeListener((group, checkedId) -> {\r\n            // Récupérer le RadioButton sélectionné\r\n            RadioButton selectedRadioButton = findViewById(checkedId);\r\n\r\n            // Faire quelque chose en fonction de la sélection\r\n            if (selectedRadioButton != null) {\r\n                String selectedText = selectedRadioButton.getText().toString();\r\n              //  showToast(\"Unité sélectionnée : \" + selectedText);\r\n            }\r\n        });\r\n\r\n        radioButtonMetric = findViewById(R.id.radioButtonMetric);\r\n        radioButtonImperial = findViewById(R.id.radioButtonImperial);\r\n\r\n        // Restaurer la sélection du RadioGroup lors du démarrage de l'application\r\n        SharedPreferences sharedPreferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int selectedRadioButtonId = sharedPreferences.getInt(SELECTED_RADIO_BUTTON_KEY, R.id.radioButtonMetric); // radioButtonMetric est la valeur par défaut\r\n        radioGroup.check(selectedRadioButtonId);\r\n\r\n        // Ajouter un écouteur de sélection pour le RadioGroup\r\n        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences.edit();\r\n                editor.putInt(SELECTED_RADIO_BUTTON_KEY, checkedId);\r\n                editor.apply();\r\n            }\r\n        });\r\n\r\n\r\n         spinnerGender = findViewById(R.id.spinner_gender);\r\n         spinnerTaille= findViewById(R.id.spinner_taille);\r\n         spinnerPoids= findViewById(R.id.spinner_poids);\r\n         spinnerRegime= findViewById(R.id.spinner_regime);\r\n         spinnerDevise= findViewById(R.id.devise);\r\n         spinnerDate= findViewById(R.id.spinner_date);\r\n         spinnerQuantite= findViewById(R.id.spinner_mesure);\r\n         spinnerPerem= findViewById(R.id.spinner_date_per);\r\n\r\n        // Définir les options pour le Spinner (ajoutez \"Genre\" en tant que première entrée)\r\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.genre,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        ArrayAdapter<CharSequence> adapter_taille = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.taille,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        ArrayAdapter<CharSequence> adapter_poids = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.poids,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        ArrayAdapter<CharSequence> adapter_regime = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.regime_speciaux,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        ArrayAdapter<CharSequence> adapter_devise = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.devise,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        ArrayAdapter<CharSequence> adapter_date = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.date,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        ArrayAdapter<CharSequence> adapter_mesure = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.mesure,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n\r\n        // Spécifier la disposition de la liste déroulante\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        adapter_taille.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        adapter_poids.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        adapter_regime.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        adapter_devise.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        adapter_date.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n        adapter_mesure.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n\r\n\r\n        // Appliquer l'adaptateur au Spinner\r\n        spinnerGender.setAdapter(adapter);\r\n        spinnerTaille.setAdapter(adapter_taille);\r\n        spinnerPoids.setAdapter(adapter_poids);\r\n        spinnerRegime.setAdapter(adapter_regime);\r\n        spinnerDevise.setAdapter(adapter_devise);\r\n        spinnerDate.setAdapter(adapter_date);\r\n        spinnerQuantite.setAdapter(adapter_mesure);\r\n        spinnerPerem.setAdapter(adapter_date);\r\n\r\n        SharedPreferences sharedPreferences_perem = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedDatePerSelection = sharedPreferences_perem.getInt(SPINNER_DATE_PER_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerPerem.setSelection(savedDatePerSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"date_per\"\r\n        spinnerPerem.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_perem.edit();\r\n                editor.putInt(SPINNER_DATE_PER_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_mesure = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedMesureSelection = sharedPreferences_mesure.getInt(SPINNER_MESURE_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerQuantite.setSelection(savedMesureSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"mesure\"\r\n        spinnerQuantite.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_mesure.edit();\r\n                editor.putInt(SPINNER_MESURE_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n\r\n\r\n        SharedPreferences sharedPreferences_date1 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedDateSelection = sharedPreferences_date1.getInt(SPINNER_DATE_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerDate.setSelection(savedDateSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"date\"\r\n        spinnerDate.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_date1.edit();\r\n                editor.putInt(SPINNER_DATE_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n\r\n        SharedPreferences sharedPreferences_device = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedDeviseSelection = sharedPreferences_device.getInt(SPINNER_DEVISE_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerDevise.setSelection(savedDeviseSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"devise\"\r\n        spinnerDevise.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_device.edit();\r\n                editor.putInt(SPINNER_DEVISE_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n\r\n        SharedPreferences sharedPreferences_gender = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedGenderSelection = sharedPreferences_gender.getInt(SPINNER_GENDER_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerGender.setSelection(savedGenderSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"genre\"\r\n        spinnerGender.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_gender.edit();\r\n                editor.putInt(SPINNER_GENDER_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n\r\n        SharedPreferences sharedPreferences_taille = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedSelection = sharedPreferences_taille.getInt(SPINNER_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerTaille.setSelection(savedSelection);\r\n\r\n\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner\r\n        spinnerTaille.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_taille.edit();\r\n                editor.putInt(SPINNER_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n\r\n        editTextPoids = findViewById(R.id.editTexte_poids);\r\n\r\n        // Restaurer la valeur du poids lors du démarrage de l'application\r\n        SharedPreferences sharedPreferences_poid = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        String savedWeight = sharedPreferences_poid.getString(WEIGHT_KEY, \"\");\r\n        editTextPoids.setText(savedWeight);\r\n\r\n        // Ajouter un TextWatcher pour détecter les changements dans l'EditText \"Poids\"\r\n        editTextPoids.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Avant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\r\n                // Pendant que le texte change\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable editable) {\r\n                // Après que le texte a changé\r\n\r\n                // Sauvegarder la nouvelle valeur automatiquement\r\n                String enteredWeight = editable.toString();\r\n                SharedPreferences.Editor editor = sharedPreferences_poid.edit();\r\n                editor.putString(WEIGHT_KEY, enteredWeight);\r\n                editor.apply();\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_listepoid = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedPoidsSelection = sharedPreferences_listepoid.getInt(SPINNER_POIDS_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerPoids.setSelection(savedPoidsSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"poids\"\r\n        spinnerPoids.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_listepoid.edit();\r\n                editor.putInt(SPINNER_POIDS_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n        SharedPreferences sharedPreferences_regime = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        int savedRegimeSelection = sharedPreferences_regime.getInt(SPINNER_REGIME_SELECTION_KEY, 0); // 0 est la valeur par défaut\r\n        spinnerRegime.setSelection(savedRegimeSelection);\r\n\r\n        // Ajouter un écouteur de sélection pour le spinner \"regime\"\r\n        spinnerRegime.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {\r\n                // Sauvegarder la nouvelle sélection automatiquement\r\n                SharedPreferences.Editor editor = sharedPreferences_regime.edit();\r\n                editor.putInt(SPINNER_REGIME_SELECTION_KEY, position);\r\n                editor.apply();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parentView) {\r\n                // Ne rien faire ici\r\n            }\r\n        });\r\n\r\n\r\n\r\n        pickDateButton = findViewById(R.id.date_naissance);\r\n        date_naissace=findViewById(R.id.dateNaissance);\r\n     \r\n\r\n        // Mettez à jour le TextView avec la date actuelle\r\n\r\n        SharedPreferences sharedPreferences_date = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\r\n        String savedDate = sharedPreferences_date.getString(SELECTED_DATE_KEY, \"\");\r\n        date_naissace.setText(savedDate);\r\n\r\n        pickDateButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                // Afficher le DatePickerDialog\r\n\r\n                openDialog();\r\n            }\r\n        });\r\n\r\n        nomProfilView = findViewById(R.id.nomProfil);\r\n        emailProfilView = findViewById(R.id.emailProfil);\r\n\r\n        LogoutButton = findViewById(R.id.button_deconne);\r\n\r\n        MyApp myApp = (MyApp) getApplication();\r\n\r\n        backendManager = new BackendManager(this);\r\n\r\n        currentUserId = myApp.getUser_id();\r\n\r\n        backendManager.getUtilisateur(currentUserId, new BackendManager.BackendResponseCallback() {\r\n\r\n            @Override\r\n            public void onSuccess(JSONObject response) throws JSONException {\r\n                String nomProfil = response.getString(\"nom\") + \" \" + response.getString(\"prénom\");\r\n                nomProfilView.setText(nomProfil);\r\n                emailProfilView.setText(response.getString(\"email\"));\r\n\r\n                String gender = response.getString(\"sexe\");\r\n                if(!gender.equals(\"null\")) {\r\n                    if(gender.equals(\"Homme\")) {\r\n                        spinnerRegime.setSelection(0);\r\n                    } else if(gender.equals(\"Femme\")) {\r\n                        spinnerRegime.setSelection(1);\r\n                    }\r\n                }\r\n\r\n                String taille = response.getString(\"taille\");\r\n                if(!taille.equals(\"null\")) {\r\n                    editTextTaille.setText(taille);\r\n                    spinnerTaille.setSelection(1);\r\n                }\r\n\r\n                String poids = response.getString(\"poids\");\r\n                System.out.println(\"!poids.equals(\\\"null\\\") = \" + !poids.equals(\"null\"));\r\n                if(!poids.equals(\"null\")) {\r\n                    editTextPoids.setText(poids);\r\n                    spinnerPoids.setSelection(1);\r\n                }\r\n\r\n                String dateDeNaissance = response.getString(\"dateDeNaissance\");\r\n                if(!dateDeNaissance.equals(\"null\")) {\r\n                    date_naissace.setText(dateDeNaissance);\r\n                }\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onError(Exception error) {\r\n                error.printStackTrace();\r\n            }\r\n        });\r\n\r\n        LogoutButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                myApp.setUser_id(0);\r\n                Intent intent = new Intent(ProfilActivity.this, LoginActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    private void openDialog(){\r\n        Calendar calendar = Calendar.getInstance();\r\n        int year = calendar.get(Calendar.YEAR);\r\n        int month = calendar.get(Calendar.MONTH);\r\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\r\n        DatePickerDialog dialog=new DatePickerDialog(this,R.style.MyDatePickerDialogTheme, new DatePickerDialog.OnDateSetListener() {\r\n            @Override\r\n            public void onDateSet(DatePicker datePicker, int year, int month, int day) {\r\n\r\n                String selectedDate = \"       \" + String.valueOf(year) + \".\" + String.valueOf(month + 1) + \".\" + String.valueOf(day);\r\n                date_naissace.setText(selectedDate);\r\n\r\n                // Sauvegarder la date sélectionnée\r\n                SharedPreferences.Editor editor = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit();\r\n                editor.putString(SELECTED_DATE_KEY, selectedDate);\r\n                editor.apply();\r\n            }\r\n        },year, month, day);\r\n\r\n        dialog.show();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_profil, menu);\r\n        return true;\r\n    }\r\n\r\n    private void showToast(String message) {\r\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private void afficherConfirmationSuppression() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"Confirmation de suppression\");\r\n        builder.setMessage(\"Voulez-vous vraiment supprimer votre compte?\");\r\n        builder.setPositiveButton(\"Oui\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                // Ajoutez le code pour supprimer le compte ici\r\n                dialogInterface.dismiss();\r\n                backendManager.deleteUtilisateur(currentUserId, new BackendManager.BackendResponseCallback() {\r\n\r\n                    @Override\r\n                    public void onSuccess(JSONObject response) throws JSONException {\r\n                        MyApp myApp = (MyApp) getApplication();\r\n                        myApp.setUser_id(0);\r\n                        Intent intent = new Intent(ProfilActivity.this, LoginActivity.class);\r\n                        startActivity(intent);\r\n                        finish();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Exception error) {\r\n                        error.printStackTrace();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        builder.setNegativeButton(\"Non\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialogInterface, int i) {\r\n                // Annuler la suppression\r\n                dialogInterface.dismiss();\r\n            }\r\n        });\r\n\r\n        AlertDialog alertDialog = builder.create();\r\n        alertDialog.show();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/stockifi/ProfilActivity.java b/app/src/main/java/com/example/stockifi/ProfilActivity.java
--- a/app/src/main/java/com/example/stockifi/ProfilActivity.java	(revision ae5ac865ffda5a936176c0f286b365be96e92e91)
+++ b/app/src/main/java/com/example/stockifi/ProfilActivity.java	(date 1703385586386)
@@ -928,6 +928,7 @@
                     public void onSuccess(JSONObject response) throws JSONException {
                         MyApp myApp = (MyApp) getApplication();
                         myApp.setUser_id(0);
+
                         Intent intent = new Intent(ProfilActivity.this, LoginActivity.class);
                         startActivity(intent);
                         finish();
